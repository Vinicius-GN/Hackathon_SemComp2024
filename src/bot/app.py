import discord
from discord.ext import commands
from discord.ui import Button, View
import api_keys
import logging

intents = discord.Intents.all()
client = commands.Bot(command_prefix="t!", intents=intents)

# Defina o ID do canal fixo (esse √© o ID do canal de suporte que voc√™ forneceu)
FIXED_CHANNEL_ID = 1297304929328828490  # Substitua pelo ID do canal onde a mensagem deve ser postada

@client.event
async def on_ready():
    """Fun√ß√£o chamada quando o bot se conecta ao servidor e est√° pronto."""
    print(f'Bot conectado como {client.user}')

    # Obt√©m o canal de suporte pelo ID
    fixed_channel = client.get_channel(FIXED_CHANNEL_ID)
    
    # Garante que o bot n√£o poste a mensagem duplicada se j√° houver mensagens fixas
    if fixed_channel:
        # Cria a visualiza√ß√£o (view) com os bot√µes
        class FixedButtonView(View):
            @discord.ui.button(label="Iniciar Central de Suporte", style=discord.ButtonStyle.green)
            async def startup(self, interaction: discord.Interaction, button: Button):
                # Invoca o comando startupMessage quando o bot√£o for clicado
                await interaction.response.send_message("Iniciando Central de Suporte...")
                await send_startup_message(fixed_channel)

        # Envia a mensagem fixa no canal com o bot√£o
        await fixed_channel.send("Clique no bot√£o abaixo para iniciar a Central de Suporte", view=FixedButtonView())

async def send_startup_message(channel):
    """Fun√ß√£o que envia a mensagem de suporte no canal"""
    embed = discord.Embed(
        title="üí° **Central de Suporte da Comunidade**",
        description="Aqui voc√™ pode encontrar solu√ß√µes para suas d√∫vidas e problemas relacionados √† comunidade, "
                    "bem como acessar formul√°rios e obter suporte da nossa equipe de modera√ß√£o. "
                    "Use os bot√µes abaixo para navegar pelas op√ß√µes de suporte.",
        colour=discord.Colour.blue()
    )

    embed.add_field(name="üìñ **Precisa de ajuda?**",
                    value="Acesse nossa [p√°gina de suporte](https://clonacartao.com.br/) para encontrar respostas r√°pidas "
                          "para as d√∫vidas mais comuns sobre a comunidade, eventos e regras. Essa p√°gina cont√©m tutoriais e "
                          "informa√ß√µes detalhadas sobre os procedimentos que seguimos.\n\n",
                    inline=False)

    embed.add_field(name="üö® **Denunciar comportamento abusivo**",
                    value="Caso voc√™ presencie ou seja v√≠tima de comportamentos inadequados, como ass√©dio, bullying ou qualquer "
                          "outro tipo de abuso, clique no bot√£o abaixo para denunciar. Nossa equipe de modera√ß√£o leva todas as "
                          "den√∫ncias a s√©rio e tomar√° as medidas cab√≠veis para garantir a seguran√ßa e o bem-estar da comunidade.\n\n",
                    inline=False)

    embed.add_field(name="üõ†Ô∏è **Relatar problemas t√©cnicos**",
                    value="Se voc√™ encontrou algum problema t√©cnico, como bugs no sistema ou dificuldades t√©cnicas durante eventos, "
                          "por favor, reporte o problema clicando no bot√£o abaixo. Nossa equipe t√©cnica est√° pronta para ajudar e "
                          "trabalhar em corre√ß√µes o mais r√°pido poss√≠vel.\n\n",
                    inline=False)

    embed.add_field(name="üîß **Contato com a modera√ß√£o**",
                    value="Se as op√ß√µes acima n√£o atenderem √†s suas necessidades, ou se voc√™ precisar de ajuda direta da equipe de modera√ß√£o, "
                          "clique no bot√£o para entrar em contato. Um canal de atendimento exclusivo ser√° criado, onde voc√™ poder√° detalhar "
                          "seu problema ou solicitar ajuda personalizada. Nossa equipe estar√° √† disposi√ß√£o para te ajudar.\n\n",
                    inline=False)

    embed.add_field(name="üìÑ **Formul√°rios de Solicita√ß√£o**",
                    value="Precisa solicitar algo espec√≠fico? Utilize nosso formul√°rio de solicita√ß√µes para os seguintes casos:\n"
                          "- **Solicita√ß√£o de adiamento de partida**: Se sua equipe n√£o puder participar de uma partida no hor√°rio agendado.\n"
                          "- **Revis√£o de resultados**: Caso haja necessidade de reavaliar o resultado de um jogo por algum motivo relevante.\n"
                          "- **Troca de membros da equipe**: Se for necess√°rio alterar a composi√ß√£o da sua equipe, adicione ou remova jogadores.\n"
                          "- **Inscri√ß√£o de novos membros**: Utilize para inscrever novos membros na equipe antes do in√≠cio de um torneio.\n"
                          "Clique no bot√£o abaixo para acessar o formul√°rio e garantir que sua solicita√ß√£o seja registrada corretamente.\n\n",
                    inline=False)

    embed.add_field(name="üìö **Suporte (FAQ)**",
                    value="Caso sua d√∫vida seja recorrente e relacionada a regras, regulamentos, inscri√ß√µes ou procedimentos gerais, "
                          "voc√™ pode encontrar respostas rapidamente acessando nossa p√°gina de Suporte (FAQ). Esta p√°gina foi criada para "
                          "ajudar a esclarecer as d√∫vidas mais comuns sem a necessidade de abrir um ticket de suporte.\n\n",
                    inline=False)

    embed.set_footer(text="Estamos aqui para ajudar! Use o bot√£o de contato com modera√ß√£o.")
    embed.set_thumbnail(url="https://pbs.twimg.com/profile_images/1628812300470611968/ZcCTd7Yg_400x400.jpg")

    # View da mensagem inicial (bot√µes)
    class StartView(View):
        @discord.ui.button(label="üîß Contatar Modera√ß√£o", style=discord.ButtonStyle.red)
        async def contactModerators(self, interaction: discord.Interaction, button: Button):
            await handle_moderation_request(interaction)

        @discord.ui.button(label="üö® Denunciar Comportamento Abusivo", style=discord.ButtonStyle.blurple)
        async def reportAbusiveBehavior(self, interaction: discord.Interaction, button: Button):
            await interaction.response.send_message("Para denunciar comportamento abusivo, preencha o formul√°rio: [Formul√°rio de Den√∫ncia](https://exemplo.com/denuncia)", ephemeral=True)

        @discord.ui.button(label="üõ†Ô∏è Reportar Bug", style=discord.ButtonStyle.grey)
        async def reportTechIssue(self, interaction: discord.Interaction, button: Button):
            await interaction.response.send_message("Para relatar um bug, por favor, acesse o formul√°rio: [Relatar Bug](https://exemplo.com/bug)", ephemeral=True)

        @discord.ui.button(label="üìÇ Formul√°rios de Solicita√ß√£o", style=discord.ButtonStyle.blurple)
        async def requestForms(self, interaction: discord.Interaction, button: Button):
            await interaction.response.send_message("Acesse os formul√°rios de solicita√ß√£o: [Formul√°rios de Solicita√ß√£o](https://exemplo.com/formularios)", ephemeral=True)

        @discord.ui.button(label="üìö Suporte (FAQ)", style=discord.ButtonStyle.green)
        async def supportFAQ(self, interaction: discord.Interaction, button: Button):
            await interaction.response.send_message("Visite a nossa p√°gina de suporte (FAQ): [FAQ](https://exemplo.com/faq)", ephemeral=True)

    # Enviar mensagem no canal
    view = StartView()
    await channel.send(embed=embed, view=view)

async def handle_moderation_request(interaction):
    """Fun√ß√£o que lida com pedidos de contato com modera√ß√£o."""
    guild = interaction.guild
    moderator_role = discord.utils.get(guild.roles, name="Moderador")
    overwrites = {
        guild.default_role: discord.PermissionOverwrite(read_messages=False),
        interaction.user: discord.PermissionOverwrite(read_messages=True),
        moderator_role: discord.PermissionOverwrite(read_messages=True)
    }
    ticket_category = await guild.create_category(
        name=f"Atendimento de {interaction.user.name}",
        overwrites=overwrites,
    )
    ticket_channel = await guild.create_text_channel(
        "Atendimento", 
        category=ticket_category,
        overwrites=overwrites
    )
    await interaction.response.send_message("Feito! V√° para o canal de atendimento.", ephemeral=True)

    message = f"Ol√° {interaction.user.name}, bem-vindo ao canal de atendimento. Responda algumas perguntas para "
    message += "que possamos te ajudar melhor.\n"
    message += "Em qual categoria seu problema se enquadra?"
    chosen_issue = ""
    
    def issueButtonFactory(issue: str):
        b = Button(label=issue)
        async def callback(interaction: discord.Interaction):
            nonlocal chosen_issue, issue
            chosen_issue = issue
            await interaction.response.send_message("Certo, problema identificado.", ephemeral=True)
        b.callback = callback
        return b

    class FirstTicketView(View):
        def __init__(self):
            super().__init__()
            categories = [
                "Conhe√ßa a plataforma",
                "D√∫vidas sobre Alian√ßa",
                "Sobre Competi√ß√µes e Ligas",
                "Problemas T√©cnicos",
                "Sistema de Premia√ß√£o",
                "Cria√ß√£o e Gest√£o de Torneios",
                "Regras e Regulamentos",
                "Adiamento de Partidas",
                "Substitui√ß√£o de Membros",
                "Outro"
            ]
            for category in categories:
                self.add_item(Button(label=category, style=discord.ButtonStyle.blurple))


    await ticket_channel.send(message, view=FirstTicketView())
    
    await client.wait_for("interaction")

    message = "Por favor, descreva em detalhes o problema que est√° enfrentando."
    embed = discord.Embed()
    embed.set_footer(text="*Esse processo ajuda a conectar voc√™ com um moderador especializado.*")
    await ticket_channel.send(message, embed=embed)
    
    def checkMessage(m):
        return m.channel == ticket_channel and m.author != client.user
    response = await client.wait_for('message', check=checkMessage)

    faq_message = "Antes de continuar, voc√™ j√° verificou nossa [p√°gina de suporte](https://clonacartao.com.br/)? "
    faq_view = View()
    faq_view.add_item(Button(label="Ver FAQ", url="https://clonacartao.com.br/", style=discord.ButtonStyle.link))
    await ticket_channel.send(faq_message, view=faq_view)

    mod_channel = discord.utils.get(guild.channels, name="atendimentos-pendentes")
    view = View()
    view.add_item(Button(label="Atender", 
        url=f"https://discord.com/channels/{guild.id}/{ticket_channel.id}")
    )
    embed = discord.Embed(title=f"Atendimento requisitado por {interaction.user.name}",
                          colour=discord.Colour.blue())
    embed.add_field(name="Topico", value=chosen_issue)
    embed.add_field(name="Descri√ß√£o", value=response.content)
    await mod_channel.send(embed=embed, view=view)
    
    class TerminationView(View):
        @discord.ui.button(label="Encerrar atendimento", style=discord.ButtonStyle.red)
        async def terminateTicket(self, interaction: discord.Interaction, button: Button):
            nonlocal ticket_category, ticket_channel
            await ticket_channel.delete()
            await ticket_category.delete()

            embed_back_to_start = discord.Embed(
                title="üí° **Central de Suporte da Comunidade**",
                description="Seu atendimento foi encerrado. Abaixo est√£o mais op√ß√µes de suporte.",
                colour=discord.Colour.blue()
            )
            embed_back_to_start.add_field(name="üìñ **Precisa de ajuda?**",
                                          value="Acesse nossa [p√°gina de suporte](https://clonacartao.com.br/)",
                                          inline=False)
            embed_back_to_start.add_field(name="üìù **Avaliar Atendimento**",
                                          value="Clique no bot√£o abaixo para avaliar o atendimento prestado.",
                                          inline=False)

            evaluation_view = View()
            evaluation_view.add_item(Button(
                label="Avaliar Atendimento", 
                url="https://seuformulario.com/avaliacao",
                style=discord.ButtonStyle.link
            ))

            await interaction.user.send(embed=embed_back_to_start, view=evaluation_view)

    termination_view = TerminationView()
    message = "A modera√ß√£o foi informada do seu problema. Em breve, um moderador ir√° te atender! Ap√≥s o atendimento, por favor, avalie o servi√ßo."
    await ticket_channel.send(message, view=termination_view)

client.run(api_keys.token_key, 
           log_handler=logging.FileHandler(filename='discord.log', encoding='utf-8', mode='w'), 
           log_level=logging.DEBUG)
